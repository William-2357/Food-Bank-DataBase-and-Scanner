# Swagger UI Configuration
swagger: "2.0"
info:
  title: "Food Bank Barcode Scanner API"
  description: "A comprehensive API for barcode scanning, food inventory management, and nutritional data retrieval"
  version: "1.0.0"
  contact:
    name: "Food Bank Scanner API"
    email: "support@foodbank-scanner.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

host: "your-app.vercel.app"
basePath: "/api"
schemes:
  - "https"
  - "http"

consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    in: "header"
    name: "X-API-Key"
    description: "API key for authentication (if required)"

paths:
  /barcode-scanner:
    post:
      tags:
        - "Barcode Scanner"
      summary: "Scan barcode and retrieve/save product data"
      description: "Scans a barcode and retrieves product information from OpenFoodFacts"
      operationId: "scanBarcode"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Barcode scan request"
          required: true
          schema:
            $ref: "#/definitions/BarcodeScanRequest"
      responses:
        200:
          description: "Product data retrieved successfully"
          schema:
            $ref: "#/definitions/BarcodeScanResponse"
        400:
          description: "Bad request - invalid barcode or action"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Product not found in OpenFoodFacts"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /foods:
    get:
      tags:
        - "Food Inventory"
      summary: "Get food inventory"
      description: "Retrieve food items from the database with optional filtering and pagination"
      operationId: "getFoods"
      produces:
        - "application/json"
      parameters:
        - name: "barcode"
          in: "query"
          description: "Filter by barcode"
          required: false
          type: "string"
          pattern: "^[0-9]{8,14}$"
        - name: "search"
          in: "query"
          description: "Search by name, brand, or category"
          required: false
          type: "string"
          minLength: 1
        - name: "limit"
          in: "query"
          description: "Maximum number of results"
          required: false
          type: "integer"
          minimum: 1
          maximum: 1000
          default: 100
        - name: "offset"
          in: "query"
          description: "Number of results to skip"
          required: false
          type: "integer"
          minimum: 0
          default: 0
      responses:
        200:
          description: "Food items retrieved successfully"
          schema:
            $ref: "#/definitions/FoodsResponse"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - "Food Inventory"
      summary: "Delete food items"
      description: "Delete food items by ID or barcode"
      operationId: "deleteFoods"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "Delete food by ID"
          required: false
          type: "string"
          format: "uuid"
        - name: "barcode"
          in: "query"
          description: "Delete all foods with this barcode"
          required: false
          type: "string"
          pattern: "^[0-9]{8,14}$"
      responses:
        200:
          description: "Food items deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"
        400:
          description: "Bad request - missing ID or barcode"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Food not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  BarcodeScanRequest:
    type: "object"
    required:
      - "barcode"
    properties:
      barcode:
        type: "string"
        pattern: "^[0-9]{8,14}$"
        description: "Barcode to scan (8-14 digits)"
        example: "123456789"
      action:
        type: "string"
        enum: ["scan", "save", "scan_and_save"]
        default: "scan"
        description: "Action to perform with the barcode"

  BarcodeScanResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      data:
        $ref: "#/definitions/FoodItem"
      message:
        type: "string"
        example: "Product scanned and saved successfully"

  FoodsResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      data:
        type: "array"
        items:
          $ref: "#/definitions/FoodItem"
      count:
        type: "integer"
        example: 25
      pagination:
        type: "object"
        properties:
          limit:
            type: "integer"
            example: 100
          offset:
            type: "integer"
            example: 0
          hasMore:
            type: "boolean"
            example: true

  DeleteResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: true
      message:
        type: "string"
        example: "Deleted 3 food items with barcode 123456789"

  FoodItem:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "Unique identifier for the food item"
        example: "550e8400-e29b-41d4-a716-446655440000"
      barcode:
        type: "string"
        pattern: "^[0-9]{8,14}$"
        description: "Product barcode"
        example: "123456789"
      name:
        type: "string"
        description: "Product name"
        example: "Organic Apple"
      brand:
        type: "string"
        description: "Product brand"
        example: "Fresh Farm"
      category:
        type: "array"
        items:
          type: "string"
        description: "Product categories"
        example: ["Fruits", "Organic"]
      calories:
        type: "integer"
        description: "Calories per 100g"
        example: 52
      protein:
        type: "number"
        format: "float"
        description: "Protein content per 100g (g)"
        example: 0.3
      fat:
        type: "number"
        format: "float"
        description: "Fat content per 100g (g)"
        example: 0.2
      carbs:
        type: "number"
        format: "float"
        description: "Carbohydrates per 100g (g)"
        example: 14.0
      fiber:
        type: "number"
        format: "float"
        description: "Fiber content per 100g (g)"
        example: 2.4
      sugars:
        type: "number"
        format: "float"
        description: "Sugars per 100g (g)"
        example: 10.4
      sodium:
        type: "number"
        format: "float"
        description: "Sodium content per 100g (g)"
        example: 0.001
      allergens:
        type: "array"
        items:
          type: "string"
        description: "List of allergens and dietary information"
        example: ["vegan", "gluten-free"]
      image_url:
        type: "string"
        format: "uri"
        description: "Product image URL"
        example: "https://world.openfoodfacts.org/images/products/123/456/789/front_en.4.400.jpg"
      expiry_date:
        type: "string"
        format: "date"
        description: "Product expiry date"
        example: "2024-12-31"
      quantity:
        type: "integer"
        description: "Quantity in inventory"
        example: 5
      location:
        type: "string"
        description: "Storage location"
        example: "Fridge A"
      created_at:
        type: "string"
        format: "date-time"
        description: "When the item was added to inventory"
        example: "2024-01-01T12:00:00Z"

  ErrorResponse:
    type: "object"
    properties:
      success:
        type: "boolean"
        example: false
      error:
        type: "string"
        description: "Error type"
        example: "Bad Request"
      message:
        type: "string"
        description: "Human-readable error message"
        example: "Invalid barcode format"
